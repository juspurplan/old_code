// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
    // Put your code here.
	Not(in=instruction[15], out=AorC);
	Mux16(a=ALUresult, b=instruction, sel=AorC, out=tempA);
	Or(a=AorC, b=instruction[5], out=loadA);
	ARegister(in=tempA, load=loadA, out=A);
	
	Mux16(a=A, b=inM, sel=instruction[12], out=AorM);
	ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUresult, zr=iszero, ng=isneg);
	
	And(a=instruction[4], b=instruction[15], out=loadD);
	DRegister(in=ALUresult, load=loadD, out=D);
	
	Connect16(in=ALUresult, out=outM);
	Not(in=AorC, out=isC);
	And(a=isC, b=instruction[3], out=tempwriteM);
	Connect(in=tempwriteM, out=writeM);
	FunChip(in=A, out=addressM);
	
	And(a=instruction[2], b=isneg, out=jmp1);
	And(a=instruction[1], b=iszero, out=jmp2);
	And(a=instruction[0], b=ispos, out=jmp3);
	Nor(a=iszero, b=isneg, out=ispos);
	Or(a=jmp1, b=jmp2, out=tjmp);
	Or(a=tjmp, b=jmp3, out=tjmp2);
	And(a=tjmp2, b=instruction[15], out=jmp);
	
	Zero(in=reset, out=zero);
	Not(in=zero, out=one);
	PC(in=A, load=jmp, inc=one, reset=reset, out=temppc);
	FunChip(in=temppc, out=pc);
}
